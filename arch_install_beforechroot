#!/bin/python
import os
from time import sleep
# activate network
print('activate network')
sleep(3)

os.system('iwctl')

# check network
print("if network isnt connected, press ctrl+c and connect it")
os.system('ping -c3 archlinux.org')

print("check lsblk")
os.system('lsblk')

disk_name = input("write the disk name as /dev/sdX: ")

print("partitioning")
sleep(4)
os.system(f'cfdisk {disk_name}')

root_par = input("write the root partition as /dev/sdXY: ")

home_par = input("write the home partition as /dev/sdXY: ")

efi_par = input("write the uefi partition as /dev/sdXY: ")

swap_par = input("write swap partition as /dev/sdXY: ")

print("formattiong partitions")
efi_par_for = input("if you want to format efi partition, write true: ")

if efi_par_for.lower() == 'true':
    os.system(f'mkfs.fat -F32 {efi_par}')
    os.system(f'fatlabel {efi_par} ARCH-BOOT')

root_par_for = input("if you want to format root partition then write true: ")
if root_par_for.lower() == 'true':
    os.system(f'mkfs.ext4 {root_par}')
    os.system(f'e2label {root_par} ARCH-ROOT')

home_par_for = input("if you want to format home partition then write true: ")
if home_par_for.lower() == 'true':
    os.system(f'mkfs.ext4 {home_par}')

#echo "mounting root, home, efi partitions"
os.system(f'mount {root_par} /mnt')
os.system('mkdir -p /mnt/home')
os.system(f'mount {home_par} /mnt/home')

#echo "make /mnt/boot"
os.system('mkdir -p /mnt/boot')
os.system(f'mount {efi_par} /mnt/boot')

#echo "copying install script to the installation root"
os.system('cp -r /arch_instl /mnt')

print("check lsblk, press ctrl+c to cancel, you have 10 sec")
os.system('lsblk')
sleep(4)

##old = input("write true to update databases and keyrings if the iso file is old: ")
##if old.lower() == 'true':
os.system('pacman -Sy --noconfirm --needed archlinux-keyring')

print("start pacstraping")
os.system('pacstrap -i /mnt base linux linux-firmware sudo nano zsh linux-headers python')

#echo "making swap and fstab file"
os.system(f'mkswap {swap_par} -L SWAP')
os.system(f'swapon {swap_par}')
os.system('genfstab -U -p /mnt >> /mnt/etc/fstab')


print("arch-chrooting")
os.system('arch-chroot /mnt /bin/python /arch_instl/arch_install_chroot')

# after exiting chroot
os.system('umount -R /mnt')

reboot = input('write true to reboot')
if reboot.lower() == 'true':
    os.system('reboot')
